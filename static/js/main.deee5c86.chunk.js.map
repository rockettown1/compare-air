{"version":3,"sources":["assets/icons/magnifying-glass.svg","assets/icons/close.svg","components/Autocomplete.js","components/Welcome.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Autocomplete","suggestionsListComponent","filteredSuggestions","showSuggestions","userInput","handleChange","handleClick","onKeyDown","length","className","map","suggestion","index","key","onClick","id","src","MagGlass","type","placeholder","onChange","value","Welcome","props","Card","data","handleRemove","Close","moment","fromNow","parseDate","measurements","lastUpdated","location","city","measurement","parameter","App","state","cities","search","handleInputChange","e","currentTarget","filter","toLowerCase","slice","indexOf","setState","handleInputClick","a","activeSuggestion","innerText","handleSubmit","url","fetch","response","json","result","push","results","console","log","splice","citiesResponse","citieslist","citiesArray","i","this","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.deee5c86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.8617f4fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.ce5bbb85.svg\";","import React from \"react\";\nimport \"../styles/autocomplete.css\";\nimport MagGlass from \"../assets/icons/magnifying-glass.svg\";\n\n//All props passed from App --> Welcome --> here\nconst Autocomplete = ({ filteredSuggestions, showSuggestions, userInput, handleChange, handleClick, onKeyDown }) => {\n  //creating basic component for list of suggestions in autocomplete\n  let suggestionsListComponent;\n  if (showSuggestions && userInput) {\n    if (filteredSuggestions.length) {\n      suggestionsListComponent = (\n        <ul className=\"suggestions\">\n          {filteredSuggestions.map((suggestion, index) => {\n            return (\n              <p key={index} onClick={handleClick}>\n                {suggestion}\n              </p>\n            );\n          })}\n        </ul>\n      );\n    } else {\n      suggestionsListComponent = null;\n    }\n  }\n\n  return (\n    <div id=\"suggestion-container\">\n      <div id=\"styled-input\">\n        <img src={MagGlass} />\n        <input\n          className=\"input\"\n          type=\"text\"\n          placeholder=\"Enter city name...\"\n          onChange={handleChange}\n          onKeyDown={onKeyDown}\n          value={userInput}\n        />\n      </div>\n      {suggestionsListComponent}\n    </div>\n  );\n};\nexport default Autocomplete;\n","import React from \"react\";\nimport \"../styles/welcome.css\";\nimport Autocomplete from \"./Autocomplete\";\n\nconst Welcome = props => {\n  return (\n    <div className=\"welcome\">\n      <h1>Compare your Air</h1>\n      <p>Compare the air quality between cities in the UK.</p>\n      <p>Select cities to compare using the search tool below.</p>\n      <Autocomplete\n        handleChange={props.handleChange}\n        handleClick={props.handleClick}\n        showSuggestions={props.showSuggestions}\n        filteredSuggestions={props.filteredSuggestions}\n        userInput={props.userInput}\n      />\n    </div>\n  );\n};\n\nexport default Welcome;\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"../styles/card.css\";\nimport Close from \"../assets/icons/close.svg\";\n\nconst Card = ({ data, handleRemove }) => {\n  // format date into readable form eg: \"Updated an hour ago\"\n  const parseDate = data => {\n    let formatted = moment(data).fromNow();\n    return formatted;\n  };\n\n  return (\n    <>\n      {/*Conditional rendering, only renders IF data array contains an item */}\n      {data.length > 0 &&\n        data.map((data, index) => {\n          return (\n            <div key={index} className=\"city-card\">\n              <div id=\"close\" onClick={() => handleRemove(index)}>\n                <img id=\"close-icon\" src={Close} />\n              </div>\n              <div id=\"wrapper\">\n                <p id=\"date\">Updated {parseDate(data.measurements[0].lastUpdated)}</p>\n                <h3 id=\"location\">{data.location}</h3>\n                <p id=\"city\">in {data.city}, United Kingdom</p>\n                <div id=\"values-container\">\n                  <p>Values: </p>\n                  {data.measurements.map((measurement, index) => {\n                    return (\n                      <div key={index} id=\"value\">\n                        <p>\n                          {measurement.parameter}: {measurement.value},\n                        </p>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n    </>\n  );\n};\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Welcome from \"./components/Welcome\";\nimport Card from \"./components/Card\";\nimport \"./styles/app.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    cities: [],\n    filteredSuggestions: [],\n    showSuggestions: false,\n    userInput: \"\",\n    search: \"\"\n  };\n  //grab cities to populate autocomplete search before components are rendered\n  async componentDidMount() {\n    const citiesURL = \"https://api.openaq.org/v1/cities?country=GB\";\n    const citiesResponse = await fetch(citiesURL);\n    const citieslist = await citiesResponse.json();\n    let citiesArray = [];\n    for (let i = 0; i < citieslist.results.length; i++) {\n      citiesArray.push(citieslist.results[i].city);\n    }\n    this.setState({ cities: citiesArray });\n  }\n\n  //handle dropdown list based on user input\n  handleInputChange = e => {\n    const { cities } = this.state;\n    const userInput = e.currentTarget.value;\n    const filteredSuggestions = cities.filter(\n      city =>\n        city\n          .toLowerCase()\n          .slice(0, userInput.length)\n          .indexOf(userInput.toLowerCase()) > -1\n    );\n\n    this.setState({\n      userInput: e.currentTarget.value,\n      filteredSuggestions: filteredSuggestions,\n      showSuggestions: true\n    });\n  };\n\n  //set search when user selects option and run fetch request\n  handleInputClick = async e => {\n    await this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: \"\",\n      search: e.currentTarget.innerText\n    });\n\n    this.handleSubmit();\n  };\n\n  //run fetch request after user has selected option\n  handleSubmit = async () => {\n    const url = `https://api.openaq.org/v1/latest?country=GB&city=${this.state.search}`;\n    const response = await fetch(url);\n    const data = await response.json();\n\n    let result = [...this.state.data];\n    result.push(data.results[0]);\n    this.setState({\n      data: result\n    });\n  };\n\n  //handle removing a card when user clicks the X\n  handleRemove = index => {\n    console.log(index);\n    let result = [...this.state.data];\n    result.splice(index, 1);\n    this.setState({ data: result });\n  };\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <>\n        <Welcome\n          handleChange={this.handleInputChange}\n          handleClick={this.handleInputClick}\n          showSuggestions={this.state.showSuggestions}\n          filteredSuggestions={this.state.filteredSuggestions}\n          userInput={this.state.userInput}\n        />\n        <div className=\"card-container\">\n          <Card data={data} handleRemove={this.handleRemove} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}